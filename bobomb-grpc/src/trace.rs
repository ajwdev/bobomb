// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/trace.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Trace {
    // message fields
    pub program_counter: u32,
    pub x: u32,
    pub y: u32,
    pub ac: u32,
    pub stack_pointer: u32,
    pub status_register: u32,
    pub cpu_cycle: u64,
    pub ppu_cycle: u64,
    pub scanline: i32,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Trace {
    fn default() -> &'a Trace {
        <Trace as ::protobuf::Message>::default_instance()
    }
}

impl Trace {
    pub fn new() -> Trace {
        ::std::default::Default::default()
    }

    // uint32 program_counter = 1;


    pub fn get_program_counter(&self) -> u32 {
        self.program_counter
    }
    pub fn clear_program_counter(&mut self) {
        self.program_counter = 0;
    }

    // Param is passed by value, moved
    pub fn set_program_counter(&mut self, v: u32) {
        self.program_counter = v;
    }

    // uint32 x = 2;


    pub fn get_x(&self) -> u32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: u32) {
        self.x = v;
    }

    // uint32 y = 3;


    pub fn get_y(&self) -> u32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: u32) {
        self.y = v;
    }

    // uint32 ac = 4;


    pub fn get_ac(&self) -> u32 {
        self.ac
    }
    pub fn clear_ac(&mut self) {
        self.ac = 0;
    }

    // Param is passed by value, moved
    pub fn set_ac(&mut self, v: u32) {
        self.ac = v;
    }

    // uint32 stack_pointer = 5;


    pub fn get_stack_pointer(&self) -> u32 {
        self.stack_pointer
    }
    pub fn clear_stack_pointer(&mut self) {
        self.stack_pointer = 0;
    }

    // Param is passed by value, moved
    pub fn set_stack_pointer(&mut self, v: u32) {
        self.stack_pointer = v;
    }

    // uint32 status_register = 6;


    pub fn get_status_register(&self) -> u32 {
        self.status_register
    }
    pub fn clear_status_register(&mut self) {
        self.status_register = 0;
    }

    // Param is passed by value, moved
    pub fn set_status_register(&mut self, v: u32) {
        self.status_register = v;
    }

    // uint64 cpu_cycle = 7;


    pub fn get_cpu_cycle(&self) -> u64 {
        self.cpu_cycle
    }
    pub fn clear_cpu_cycle(&mut self) {
        self.cpu_cycle = 0;
    }

    // Param is passed by value, moved
    pub fn set_cpu_cycle(&mut self, v: u64) {
        self.cpu_cycle = v;
    }

    // uint64 ppu_cycle = 8;


    pub fn get_ppu_cycle(&self) -> u64 {
        self.ppu_cycle
    }
    pub fn clear_ppu_cycle(&mut self) {
        self.ppu_cycle = 0;
    }

    // Param is passed by value, moved
    pub fn set_ppu_cycle(&mut self, v: u64) {
        self.ppu_cycle = v;
    }

    // int32 scanline = 9;


    pub fn get_scanline(&self) -> i32 {
        self.scanline
    }
    pub fn clear_scanline(&mut self) {
        self.scanline = 0;
    }

    // Param is passed by value, moved
    pub fn set_scanline(&mut self, v: i32) {
        self.scanline = v;
    }

    // bytes payload = 10;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Trace {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.program_counter = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.x = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.y = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ac = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.stack_pointer = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.status_register = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cpu_cycle = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ppu_cycle = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.scanline = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.program_counter != 0 {
            my_size += ::protobuf::rt::value_size(1, self.program_counter, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.x != 0 {
            my_size += ::protobuf::rt::value_size(2, self.x, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::value_size(3, self.y, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ac != 0 {
            my_size += ::protobuf::rt::value_size(4, self.ac, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.stack_pointer != 0 {
            my_size += ::protobuf::rt::value_size(5, self.stack_pointer, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.status_register != 0 {
            my_size += ::protobuf::rt::value_size(6, self.status_register, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cpu_cycle != 0 {
            my_size += ::protobuf::rt::value_size(7, self.cpu_cycle, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ppu_cycle != 0 {
            my_size += ::protobuf::rt::value_size(8, self.ppu_cycle, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.scanline != 0 {
            my_size += ::protobuf::rt::value_size(9, self.scanline, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.program_counter != 0 {
            os.write_uint32(1, self.program_counter)?;
        }
        if self.x != 0 {
            os.write_uint32(2, self.x)?;
        }
        if self.y != 0 {
            os.write_uint32(3, self.y)?;
        }
        if self.ac != 0 {
            os.write_uint32(4, self.ac)?;
        }
        if self.stack_pointer != 0 {
            os.write_uint32(5, self.stack_pointer)?;
        }
        if self.status_register != 0 {
            os.write_uint32(6, self.status_register)?;
        }
        if self.cpu_cycle != 0 {
            os.write_uint64(7, self.cpu_cycle)?;
        }
        if self.ppu_cycle != 0 {
            os.write_uint64(8, self.ppu_cycle)?;
        }
        if self.scanline != 0 {
            os.write_int32(9, self.scanline)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(10, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Trace {
        Trace::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "program_counter",
                |m: &Trace| { &m.program_counter },
                |m: &mut Trace| { &mut m.program_counter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "x",
                |m: &Trace| { &m.x },
                |m: &mut Trace| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "y",
                |m: &Trace| { &m.y },
                |m: &mut Trace| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "ac",
                |m: &Trace| { &m.ac },
                |m: &mut Trace| { &mut m.ac },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "stack_pointer",
                |m: &Trace| { &m.stack_pointer },
                |m: &mut Trace| { &mut m.stack_pointer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "status_register",
                |m: &Trace| { &m.status_register },
                |m: &mut Trace| { &mut m.status_register },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "cpu_cycle",
                |m: &Trace| { &m.cpu_cycle },
                |m: &mut Trace| { &mut m.cpu_cycle },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "ppu_cycle",
                |m: &Trace| { &m.ppu_cycle },
                |m: &mut Trace| { &mut m.ppu_cycle },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "scanline",
                |m: &Trace| { &m.scanline },
                |m: &mut Trace| { &mut m.scanline },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &Trace| { &m.payload },
                |m: &mut Trace| { &mut m.payload },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Trace>(
                "Trace",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Trace {
        static instance: ::protobuf::rt::LazyV2<Trace> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Trace::new)
    }
}

impl ::protobuf::Clear for Trace {
    fn clear(&mut self) {
        self.program_counter = 0;
        self.x = 0;
        self.y = 0;
        self.ac = 0;
        self.stack_pointer = 0;
        self.status_register = 0;
        self.cpu_cycle = 0;
        self.ppu_cycle = 0;
        self.scanline = 0;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Trace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Trace {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11proto/trace.proto\"\x9a\x02\n\x05Trace\x12'\n\x0fprogram_counter\
    \x18\x01\x20\x01(\rR\x0eprogramCounter\x12\x0c\n\x01x\x18\x02\x20\x01(\r\
    R\x01x\x12\x0c\n\x01y\x18\x03\x20\x01(\rR\x01y\x12\x0e\n\x02ac\x18\x04\
    \x20\x01(\rR\x02ac\x12#\n\rstack_pointer\x18\x05\x20\x01(\rR\x0cstackPoi\
    nter\x12'\n\x0fstatus_register\x18\x06\x20\x01(\rR\x0estatusRegister\x12\
    \x1b\n\tcpu_cycle\x18\x07\x20\x01(\x04R\x08cpuCycle\x12\x1b\n\tppu_cycle\
    \x18\x08\x20\x01(\x04R\x08ppuCycle\x12\x1a\n\x08scanline\x18\t\x20\x01(\
    \x05R\x08scanline\x12\x18\n\x07payload\x18\n\x20\x01(\x0cR\x07payloadb\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
