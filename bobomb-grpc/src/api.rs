// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct AttachRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AttachRequest {
    fn default() -> &'a AttachRequest {
        <AttachRequest as ::protobuf::Message>::default_instance()
    }
}

impl AttachRequest {
    pub fn new() -> AttachRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for AttachRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AttachRequest {
        AttachRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AttachRequest>(
                "AttachRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AttachRequest {
        static instance: ::protobuf::rt::LazyV2<AttachRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AttachRequest::new)
    }
}

impl ::protobuf::Clear for AttachRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AttachRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttachRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AttachReply {
    // message fields
    pub cpu: ::protobuf::SingularPtrField<CPUState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AttachReply {
    fn default() -> &'a AttachReply {
        <AttachReply as ::protobuf::Message>::default_instance()
    }
}

impl AttachReply {
    pub fn new() -> AttachReply {
        ::std::default::Default::default()
    }

    // .CPUState cpu = 1;


    pub fn get_cpu(&self) -> &CPUState {
        self.cpu.as_ref().unwrap_or_else(|| <CPUState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cpu(&mut self) {
        self.cpu.clear();
    }

    pub fn has_cpu(&self) -> bool {
        self.cpu.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cpu(&mut self, v: CPUState) {
        self.cpu = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cpu(&mut self) -> &mut CPUState {
        if self.cpu.is_none() {
            self.cpu.set_default();
        }
        self.cpu.as_mut().unwrap()
    }

    // Take field
    pub fn take_cpu(&mut self) -> CPUState {
        self.cpu.take().unwrap_or_else(|| CPUState::new())
    }
}

impl ::protobuf::Message for AttachReply {
    fn is_initialized(&self) -> bool {
        for v in &self.cpu {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cpu)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.cpu.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.cpu.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AttachReply {
        AttachReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CPUState>>(
                "cpu",
                |m: &AttachReply| { &m.cpu },
                |m: &mut AttachReply| { &mut m.cpu },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AttachReply>(
                "AttachReply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AttachReply {
        static instance: ::protobuf::rt::LazyV2<AttachReply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AttachReply::new)
    }
}

impl ::protobuf::Clear for AttachReply {
    fn clear(&mut self) {
        self.cpu.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AttachReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttachReply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResumeRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResumeRequest {
    fn default() -> &'a ResumeRequest {
        <ResumeRequest as ::protobuf::Message>::default_instance()
    }
}

impl ResumeRequest {
    pub fn new() -> ResumeRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ResumeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResumeRequest {
        ResumeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResumeRequest>(
                "ResumeRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResumeRequest {
        static instance: ::protobuf::rt::LazyV2<ResumeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResumeRequest::new)
    }
}

impl ::protobuf::Clear for ResumeRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResumeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResumeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResumeReply {
    // message fields
    pub cpu: ::protobuf::SingularPtrField<CPUState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResumeReply {
    fn default() -> &'a ResumeReply {
        <ResumeReply as ::protobuf::Message>::default_instance()
    }
}

impl ResumeReply {
    pub fn new() -> ResumeReply {
        ::std::default::Default::default()
    }

    // .CPUState cpu = 1;


    pub fn get_cpu(&self) -> &CPUState {
        self.cpu.as_ref().unwrap_or_else(|| <CPUState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cpu(&mut self) {
        self.cpu.clear();
    }

    pub fn has_cpu(&self) -> bool {
        self.cpu.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cpu(&mut self, v: CPUState) {
        self.cpu = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cpu(&mut self) -> &mut CPUState {
        if self.cpu.is_none() {
            self.cpu.set_default();
        }
        self.cpu.as_mut().unwrap()
    }

    // Take field
    pub fn take_cpu(&mut self) -> CPUState {
        self.cpu.take().unwrap_or_else(|| CPUState::new())
    }
}

impl ::protobuf::Message for ResumeReply {
    fn is_initialized(&self) -> bool {
        for v in &self.cpu {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cpu)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.cpu.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.cpu.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResumeReply {
        ResumeReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CPUState>>(
                "cpu",
                |m: &ResumeReply| { &m.cpu },
                |m: &mut ResumeReply| { &mut m.cpu },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResumeReply>(
                "ResumeReply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResumeReply {
        static instance: ::protobuf::rt::LazyV2<ResumeReply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResumeReply::new)
    }
}

impl ::protobuf::Clear for ResumeReply {
    fn clear(&mut self) {
        self.cpu.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResumeReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResumeReply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StepRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StepRequest {
    fn default() -> &'a StepRequest {
        <StepRequest as ::protobuf::Message>::default_instance()
    }
}

impl StepRequest {
    pub fn new() -> StepRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StepRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StepRequest {
        StepRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StepRequest>(
                "StepRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StepRequest {
        static instance: ::protobuf::rt::LazyV2<StepRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StepRequest::new)
    }
}

impl ::protobuf::Clear for StepRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StepRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StepRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StepReply {
    // message fields
    pub cpu: ::protobuf::SingularPtrField<CPUState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StepReply {
    fn default() -> &'a StepReply {
        <StepReply as ::protobuf::Message>::default_instance()
    }
}

impl StepReply {
    pub fn new() -> StepReply {
        ::std::default::Default::default()
    }

    // .CPUState cpu = 1;


    pub fn get_cpu(&self) -> &CPUState {
        self.cpu.as_ref().unwrap_or_else(|| <CPUState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cpu(&mut self) {
        self.cpu.clear();
    }

    pub fn has_cpu(&self) -> bool {
        self.cpu.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cpu(&mut self, v: CPUState) {
        self.cpu = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cpu(&mut self) -> &mut CPUState {
        if self.cpu.is_none() {
            self.cpu.set_default();
        }
        self.cpu.as_mut().unwrap()
    }

    // Take field
    pub fn take_cpu(&mut self) -> CPUState {
        self.cpu.take().unwrap_or_else(|| CPUState::new())
    }
}

impl ::protobuf::Message for StepReply {
    fn is_initialized(&self) -> bool {
        for v in &self.cpu {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cpu)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.cpu.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.cpu.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StepReply {
        StepReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CPUState>>(
                "cpu",
                |m: &StepReply| { &m.cpu },
                |m: &mut StepReply| { &mut m.cpu },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StepReply>(
                "StepReply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StepReply {
        static instance: ::protobuf::rt::LazyV2<StepReply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StepReply::new)
    }
}

impl ::protobuf::Clear for StepReply {
    fn clear(&mut self) {
        self.cpu.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StepReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StepReply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PutBreakpointRequest {
    // message fields
    pub address: u32,
    pub temporary: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PutBreakpointRequest {
    fn default() -> &'a PutBreakpointRequest {
        <PutBreakpointRequest as ::protobuf::Message>::default_instance()
    }
}

impl PutBreakpointRequest {
    pub fn new() -> PutBreakpointRequest {
        ::std::default::Default::default()
    }

    // uint32 address = 1;


    pub fn get_address(&self) -> u32 {
        self.address
    }
    pub fn clear_address(&mut self) {
        self.address = 0;
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u32) {
        self.address = v;
    }

    // bool temporary = 2;


    pub fn get_temporary(&self) -> bool {
        self.temporary
    }
    pub fn clear_temporary(&mut self) {
        self.temporary = false;
    }

    // Param is passed by value, moved
    pub fn set_temporary(&mut self, v: bool) {
        self.temporary = v;
    }
}

impl ::protobuf::Message for PutBreakpointRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.address = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.temporary = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.address != 0 {
            my_size += ::protobuf::rt::value_size(1, self.address, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.temporary != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.address != 0 {
            os.write_uint32(1, self.address)?;
        }
        if self.temporary != false {
            os.write_bool(2, self.temporary)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PutBreakpointRequest {
        PutBreakpointRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address",
                |m: &PutBreakpointRequest| { &m.address },
                |m: &mut PutBreakpointRequest| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "temporary",
                |m: &PutBreakpointRequest| { &m.temporary },
                |m: &mut PutBreakpointRequest| { &mut m.temporary },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PutBreakpointRequest>(
                "PutBreakpointRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PutBreakpointRequest {
        static instance: ::protobuf::rt::LazyV2<PutBreakpointRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PutBreakpointRequest::new)
    }
}

impl ::protobuf::Clear for PutBreakpointRequest {
    fn clear(&mut self) {
        self.address = 0;
        self.temporary = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PutBreakpointRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PutBreakpointRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteBreakpointRequest {
    // message fields
    pub address: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteBreakpointRequest {
    fn default() -> &'a DeleteBreakpointRequest {
        <DeleteBreakpointRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteBreakpointRequest {
    pub fn new() -> DeleteBreakpointRequest {
        ::std::default::Default::default()
    }

    // uint32 address = 1;


    pub fn get_address(&self) -> u32 {
        self.address
    }
    pub fn clear_address(&mut self) {
        self.address = 0;
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u32) {
        self.address = v;
    }
}

impl ::protobuf::Message for DeleteBreakpointRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.address = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.address != 0 {
            my_size += ::protobuf::rt::value_size(1, self.address, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.address != 0 {
            os.write_uint32(1, self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteBreakpointRequest {
        DeleteBreakpointRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address",
                |m: &DeleteBreakpointRequest| { &m.address },
                |m: &mut DeleteBreakpointRequest| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteBreakpointRequest>(
                "DeleteBreakpointRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteBreakpointRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteBreakpointRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteBreakpointRequest::new)
    }
}

impl ::protobuf::Clear for DeleteBreakpointRequest {
    fn clear(&mut self) {
        self.address = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteBreakpointRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteBreakpointRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BreakpointReply {
    // message fields
    pub address: u32,
    pub temporary: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BreakpointReply {
    fn default() -> &'a BreakpointReply {
        <BreakpointReply as ::protobuf::Message>::default_instance()
    }
}

impl BreakpointReply {
    pub fn new() -> BreakpointReply {
        ::std::default::Default::default()
    }

    // uint32 address = 1;


    pub fn get_address(&self) -> u32 {
        self.address
    }
    pub fn clear_address(&mut self) {
        self.address = 0;
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u32) {
        self.address = v;
    }

    // bool temporary = 2;


    pub fn get_temporary(&self) -> bool {
        self.temporary
    }
    pub fn clear_temporary(&mut self) {
        self.temporary = false;
    }

    // Param is passed by value, moved
    pub fn set_temporary(&mut self, v: bool) {
        self.temporary = v;
    }
}

impl ::protobuf::Message for BreakpointReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.address = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.temporary = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.address != 0 {
            my_size += ::protobuf::rt::value_size(1, self.address, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.temporary != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.address != 0 {
            os.write_uint32(1, self.address)?;
        }
        if self.temporary != false {
            os.write_bool(2, self.temporary)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BreakpointReply {
        BreakpointReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address",
                |m: &BreakpointReply| { &m.address },
                |m: &mut BreakpointReply| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "temporary",
                |m: &BreakpointReply| { &m.temporary },
                |m: &mut BreakpointReply| { &mut m.temporary },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BreakpointReply>(
                "BreakpointReply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BreakpointReply {
        static instance: ::protobuf::rt::LazyV2<BreakpointReply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BreakpointReply::new)
    }
}

impl ::protobuf::Clear for BreakpointReply {
    fn clear(&mut self) {
        self.address = 0;
        self.temporary = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BreakpointReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BreakpointReply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadMemoryRequest {
    // message fields
    pub start: u32,
    pub count: i32,
    pub count_by_instruction: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadMemoryRequest {
    fn default() -> &'a ReadMemoryRequest {
        <ReadMemoryRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadMemoryRequest {
    pub fn new() -> ReadMemoryRequest {
        ::std::default::Default::default()
    }

    // uint32 start = 1;


    pub fn get_start(&self) -> u32 {
        self.start
    }
    pub fn clear_start(&mut self) {
        self.start = 0;
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: u32) {
        self.start = v;
    }

    // int32 count = 2;


    pub fn get_count(&self) -> i32 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i32) {
        self.count = v;
    }

    // bool count_by_instruction = 3;


    pub fn get_count_by_instruction(&self) -> bool {
        self.count_by_instruction
    }
    pub fn clear_count_by_instruction(&mut self) {
        self.count_by_instruction = false;
    }

    // Param is passed by value, moved
    pub fn set_count_by_instruction(&mut self, v: bool) {
        self.count_by_instruction = v;
    }
}

impl ::protobuf::Message for ReadMemoryRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.start = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.count = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.count_by_instruction = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.start != 0 {
            my_size += ::protobuf::rt::value_size(1, self.start, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.count_by_instruction != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.start != 0 {
            os.write_uint32(1, self.start)?;
        }
        if self.count != 0 {
            os.write_int32(2, self.count)?;
        }
        if self.count_by_instruction != false {
            os.write_bool(3, self.count_by_instruction)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadMemoryRequest {
        ReadMemoryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "start",
                |m: &ReadMemoryRequest| { &m.start },
                |m: &mut ReadMemoryRequest| { &mut m.start },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "count",
                |m: &ReadMemoryRequest| { &m.count },
                |m: &mut ReadMemoryRequest| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "count_by_instruction",
                |m: &ReadMemoryRequest| { &m.count_by_instruction },
                |m: &mut ReadMemoryRequest| { &mut m.count_by_instruction },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadMemoryRequest>(
                "ReadMemoryRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadMemoryRequest {
        static instance: ::protobuf::rt::LazyV2<ReadMemoryRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadMemoryRequest::new)
    }
}

impl ::protobuf::Clear for ReadMemoryRequest {
    fn clear(&mut self) {
        self.start = 0;
        self.count = 0;
        self.count_by_instruction = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadMemoryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadMemoryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadMemoryReply {
    // message fields
    pub start: u32,
    pub data: ::std::vec::Vec<u8>,
    pub count: u32,
    pub program_counter: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadMemoryReply {
    fn default() -> &'a ReadMemoryReply {
        <ReadMemoryReply as ::protobuf::Message>::default_instance()
    }
}

impl ReadMemoryReply {
    pub fn new() -> ReadMemoryReply {
        ::std::default::Default::default()
    }

    // uint32 start = 1;


    pub fn get_start(&self) -> u32 {
        self.start
    }
    pub fn clear_start(&mut self) {
        self.start = 0;
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: u32) {
        self.start = v;
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // uint32 count = 3;


    pub fn get_count(&self) -> u32 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = v;
    }

    // uint32 program_counter = 4;


    pub fn get_program_counter(&self) -> u32 {
        self.program_counter
    }
    pub fn clear_program_counter(&mut self) {
        self.program_counter = 0;
    }

    // Param is passed by value, moved
    pub fn set_program_counter(&mut self, v: u32) {
        self.program_counter = v;
    }
}

impl ::protobuf::Message for ReadMemoryReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.start = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.count = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.program_counter = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.start != 0 {
            my_size += ::protobuf::rt::value_size(1, self.start, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(3, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.program_counter != 0 {
            my_size += ::protobuf::rt::value_size(4, self.program_counter, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.start != 0 {
            os.write_uint32(1, self.start)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        if self.count != 0 {
            os.write_uint32(3, self.count)?;
        }
        if self.program_counter != 0 {
            os.write_uint32(4, self.program_counter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadMemoryReply {
        ReadMemoryReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "start",
                |m: &ReadMemoryReply| { &m.start },
                |m: &mut ReadMemoryReply| { &mut m.start },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &ReadMemoryReply| { &m.data },
                |m: &mut ReadMemoryReply| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "count",
                |m: &ReadMemoryReply| { &m.count },
                |m: &mut ReadMemoryReply| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "program_counter",
                |m: &ReadMemoryReply| { &m.program_counter },
                |m: &mut ReadMemoryReply| { &mut m.program_counter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadMemoryReply>(
                "ReadMemoryReply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadMemoryReply {
        static instance: ::protobuf::rt::LazyV2<ReadMemoryReply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadMemoryReply::new)
    }
}

impl ::protobuf::Clear for ReadMemoryReply {
    fn clear(&mut self) {
        self.start = 0;
        self.data.clear();
        self.count = 0;
        self.program_counter = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadMemoryReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadMemoryReply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StatusRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StatusRequest {
    fn default() -> &'a StatusRequest {
        <StatusRequest as ::protobuf::Message>::default_instance()
    }
}

impl StatusRequest {
    pub fn new() -> StatusRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StatusRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StatusRequest {
        StatusRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StatusRequest>(
                "StatusRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StatusRequest {
        static instance: ::protobuf::rt::LazyV2<StatusRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StatusRequest::new)
    }
}

impl ::protobuf::Clear for StatusRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StatusRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatusRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StatusReply {
    // message fields
    pub rom_name: ::std::string::String,
    pub emulation_state: StatusReply_EmulationState,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StatusReply {
    fn default() -> &'a StatusReply {
        <StatusReply as ::protobuf::Message>::default_instance()
    }
}

impl StatusReply {
    pub fn new() -> StatusReply {
        ::std::default::Default::default()
    }

    // string rom_name = 1;


    pub fn get_rom_name(&self) -> &str {
        &self.rom_name
    }
    pub fn clear_rom_name(&mut self) {
        self.rom_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_rom_name(&mut self, v: ::std::string::String) {
        self.rom_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rom_name(&mut self) -> &mut ::std::string::String {
        &mut self.rom_name
    }

    // Take field
    pub fn take_rom_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rom_name, ::std::string::String::new())
    }

    // .StatusReply.EmulationState emulation_state = 2;


    pub fn get_emulation_state(&self) -> StatusReply_EmulationState {
        self.emulation_state
    }
    pub fn clear_emulation_state(&mut self) {
        self.emulation_state = StatusReply_EmulationState::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_emulation_state(&mut self, v: StatusReply_EmulationState) {
        self.emulation_state = v;
    }
}

impl ::protobuf::Message for StatusReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rom_name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.emulation_state, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.rom_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.rom_name);
        }
        if self.emulation_state != StatusReply_EmulationState::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.emulation_state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.rom_name.is_empty() {
            os.write_string(1, &self.rom_name)?;
        }
        if self.emulation_state != StatusReply_EmulationState::UNKNOWN {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.emulation_state))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StatusReply {
        StatusReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rom_name",
                |m: &StatusReply| { &m.rom_name },
                |m: &mut StatusReply| { &mut m.rom_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<StatusReply_EmulationState>>(
                "emulation_state",
                |m: &StatusReply| { &m.emulation_state },
                |m: &mut StatusReply| { &mut m.emulation_state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StatusReply>(
                "StatusReply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StatusReply {
        static instance: ::protobuf::rt::LazyV2<StatusReply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StatusReply::new)
    }
}

impl ::protobuf::Clear for StatusReply {
    fn clear(&mut self) {
        self.rom_name.clear();
        self.emulation_state = StatusReply_EmulationState::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StatusReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatusReply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum StatusReply_EmulationState {
    UNKNOWN = 0,
    RUNNING = 1,
    STOPPED = 2,
}

impl ::protobuf::ProtobufEnum for StatusReply_EmulationState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<StatusReply_EmulationState> {
        match value {
            0 => ::std::option::Option::Some(StatusReply_EmulationState::UNKNOWN),
            1 => ::std::option::Option::Some(StatusReply_EmulationState::RUNNING),
            2 => ::std::option::Option::Some(StatusReply_EmulationState::STOPPED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [StatusReply_EmulationState] = &[
            StatusReply_EmulationState::UNKNOWN,
            StatusReply_EmulationState::RUNNING,
            StatusReply_EmulationState::STOPPED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<StatusReply_EmulationState>("StatusReply.EmulationState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for StatusReply_EmulationState {
}

impl ::std::default::Default for StatusReply_EmulationState {
    fn default() -> Self {
        StatusReply_EmulationState::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for StatusReply_EmulationState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadCPURequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadCPURequest {
    fn default() -> &'a ReadCPURequest {
        <ReadCPURequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadCPURequest {
    pub fn new() -> ReadCPURequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ReadCPURequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadCPURequest {
        ReadCPURequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadCPURequest>(
                "ReadCPURequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadCPURequest {
        static instance: ::protobuf::rt::LazyV2<ReadCPURequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadCPURequest::new)
    }
}

impl ::protobuf::Clear for ReadCPURequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadCPURequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadCPURequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadCPUReply {
    // message fields
    pub cpu: ::protobuf::SingularPtrField<CPUState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadCPUReply {
    fn default() -> &'a ReadCPUReply {
        <ReadCPUReply as ::protobuf::Message>::default_instance()
    }
}

impl ReadCPUReply {
    pub fn new() -> ReadCPUReply {
        ::std::default::Default::default()
    }

    // .CPUState cpu = 1;


    pub fn get_cpu(&self) -> &CPUState {
        self.cpu.as_ref().unwrap_or_else(|| <CPUState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cpu(&mut self) {
        self.cpu.clear();
    }

    pub fn has_cpu(&self) -> bool {
        self.cpu.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cpu(&mut self, v: CPUState) {
        self.cpu = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cpu(&mut self) -> &mut CPUState {
        if self.cpu.is_none() {
            self.cpu.set_default();
        }
        self.cpu.as_mut().unwrap()
    }

    // Take field
    pub fn take_cpu(&mut self) -> CPUState {
        self.cpu.take().unwrap_or_else(|| CPUState::new())
    }
}

impl ::protobuf::Message for ReadCPUReply {
    fn is_initialized(&self) -> bool {
        for v in &self.cpu {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cpu)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.cpu.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.cpu.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadCPUReply {
        ReadCPUReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CPUState>>(
                "cpu",
                |m: &ReadCPUReply| { &m.cpu },
                |m: &mut ReadCPUReply| { &mut m.cpu },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadCPUReply>(
                "ReadCPUReply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadCPUReply {
        static instance: ::protobuf::rt::LazyV2<ReadCPUReply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadCPUReply::new)
    }
}

impl ::protobuf::Clear for ReadCPUReply {
    fn clear(&mut self) {
        self.cpu.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadCPUReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadCPUReply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CPUState {
    // message fields
    pub x: u32,
    pub y: u32,
    pub ac: u32,
    pub status: ::protobuf::SingularPtrField<CPUState_CpuStatusRegister>,
    pub program_counter: u32,
    pub stack_pointer: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPUState {
    fn default() -> &'a CPUState {
        <CPUState as ::protobuf::Message>::default_instance()
    }
}

impl CPUState {
    pub fn new() -> CPUState {
        ::std::default::Default::default()
    }

    // uint32 x = 1;


    pub fn get_x(&self) -> u32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: u32) {
        self.x = v;
    }

    // uint32 y = 2;


    pub fn get_y(&self) -> u32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: u32) {
        self.y = v;
    }

    // uint32 ac = 3;


    pub fn get_ac(&self) -> u32 {
        self.ac
    }
    pub fn clear_ac(&mut self) {
        self.ac = 0;
    }

    // Param is passed by value, moved
    pub fn set_ac(&mut self, v: u32) {
        self.ac = v;
    }

    // .CPUState.CpuStatusRegister status = 4;


    pub fn get_status(&self) -> &CPUState_CpuStatusRegister {
        self.status.as_ref().unwrap_or_else(|| <CPUState_CpuStatusRegister as ::protobuf::Message>::default_instance())
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: CPUState_CpuStatusRegister) {
        self.status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut CPUState_CpuStatusRegister {
        if self.status.is_none() {
            self.status.set_default();
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> CPUState_CpuStatusRegister {
        self.status.take().unwrap_or_else(|| CPUState_CpuStatusRegister::new())
    }

    // uint32 program_counter = 5;


    pub fn get_program_counter(&self) -> u32 {
        self.program_counter
    }
    pub fn clear_program_counter(&mut self) {
        self.program_counter = 0;
    }

    // Param is passed by value, moved
    pub fn set_program_counter(&mut self, v: u32) {
        self.program_counter = v;
    }

    // uint32 stack_pointer = 6;


    pub fn get_stack_pointer(&self) -> u32 {
        self.stack_pointer
    }
    pub fn clear_stack_pointer(&mut self) {
        self.stack_pointer = 0;
    }

    // Param is passed by value, moved
    pub fn set_stack_pointer(&mut self, v: u32) {
        self.stack_pointer = v;
    }
}

impl ::protobuf::Message for CPUState {
    fn is_initialized(&self) -> bool {
        for v in &self.status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.y = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.ac = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.program_counter = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.stack_pointer = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0 {
            my_size += ::protobuf::rt::value_size(1, self.x, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::value_size(2, self.y, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ac != 0 {
            my_size += ::protobuf::rt::value_size(3, self.ac, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.program_counter != 0 {
            my_size += ::protobuf::rt::value_size(5, self.program_counter, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.stack_pointer != 0 {
            my_size += ::protobuf::rt::value_size(6, self.stack_pointer, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0 {
            os.write_uint32(1, self.x)?;
        }
        if self.y != 0 {
            os.write_uint32(2, self.y)?;
        }
        if self.ac != 0 {
            os.write_uint32(3, self.ac)?;
        }
        if let Some(ref v) = self.status.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.program_counter != 0 {
            os.write_uint32(5, self.program_counter)?;
        }
        if self.stack_pointer != 0 {
            os.write_uint32(6, self.stack_pointer)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPUState {
        CPUState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "x",
                |m: &CPUState| { &m.x },
                |m: &mut CPUState| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "y",
                |m: &CPUState| { &m.y },
                |m: &mut CPUState| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "ac",
                |m: &CPUState| { &m.ac },
                |m: &mut CPUState| { &mut m.ac },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CPUState_CpuStatusRegister>>(
                "status",
                |m: &CPUState| { &m.status },
                |m: &mut CPUState| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "program_counter",
                |m: &CPUState| { &m.program_counter },
                |m: &mut CPUState| { &mut m.program_counter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "stack_pointer",
                |m: &CPUState| { &m.stack_pointer },
                |m: &mut CPUState| { &mut m.stack_pointer },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPUState>(
                "CPUState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPUState {
        static instance: ::protobuf::rt::LazyV2<CPUState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPUState::new)
    }
}

impl ::protobuf::Clear for CPUState {
    fn clear(&mut self) {
        self.x = 0;
        self.y = 0;
        self.ac = 0;
        self.status.clear();
        self.program_counter = 0;
        self.stack_pointer = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPUState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPUState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CPUState_CpuStatusRegister {
    // message fields
    pub negative: bool,
    pub overflow: bool,
    pub interrupt: bool,
    pub zero: bool,
    pub carry: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CPUState_CpuStatusRegister {
    fn default() -> &'a CPUState_CpuStatusRegister {
        <CPUState_CpuStatusRegister as ::protobuf::Message>::default_instance()
    }
}

impl CPUState_CpuStatusRegister {
    pub fn new() -> CPUState_CpuStatusRegister {
        ::std::default::Default::default()
    }

    // bool negative = 1;


    pub fn get_negative(&self) -> bool {
        self.negative
    }
    pub fn clear_negative(&mut self) {
        self.negative = false;
    }

    // Param is passed by value, moved
    pub fn set_negative(&mut self, v: bool) {
        self.negative = v;
    }

    // bool overflow = 2;


    pub fn get_overflow(&self) -> bool {
        self.overflow
    }
    pub fn clear_overflow(&mut self) {
        self.overflow = false;
    }

    // Param is passed by value, moved
    pub fn set_overflow(&mut self, v: bool) {
        self.overflow = v;
    }

    // bool interrupt = 3;


    pub fn get_interrupt(&self) -> bool {
        self.interrupt
    }
    pub fn clear_interrupt(&mut self) {
        self.interrupt = false;
    }

    // Param is passed by value, moved
    pub fn set_interrupt(&mut self, v: bool) {
        self.interrupt = v;
    }

    // bool zero = 4;


    pub fn get_zero(&self) -> bool {
        self.zero
    }
    pub fn clear_zero(&mut self) {
        self.zero = false;
    }

    // Param is passed by value, moved
    pub fn set_zero(&mut self, v: bool) {
        self.zero = v;
    }

    // bool carry = 5;


    pub fn get_carry(&self) -> bool {
        self.carry
    }
    pub fn clear_carry(&mut self) {
        self.carry = false;
    }

    // Param is passed by value, moved
    pub fn set_carry(&mut self, v: bool) {
        self.carry = v;
    }
}

impl ::protobuf::Message for CPUState_CpuStatusRegister {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.negative = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.overflow = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.interrupt = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.zero = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.carry = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.negative != false {
            my_size += 2;
        }
        if self.overflow != false {
            my_size += 2;
        }
        if self.interrupt != false {
            my_size += 2;
        }
        if self.zero != false {
            my_size += 2;
        }
        if self.carry != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.negative != false {
            os.write_bool(1, self.negative)?;
        }
        if self.overflow != false {
            os.write_bool(2, self.overflow)?;
        }
        if self.interrupt != false {
            os.write_bool(3, self.interrupt)?;
        }
        if self.zero != false {
            os.write_bool(4, self.zero)?;
        }
        if self.carry != false {
            os.write_bool(5, self.carry)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CPUState_CpuStatusRegister {
        CPUState_CpuStatusRegister::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "negative",
                |m: &CPUState_CpuStatusRegister| { &m.negative },
                |m: &mut CPUState_CpuStatusRegister| { &mut m.negative },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "overflow",
                |m: &CPUState_CpuStatusRegister| { &m.overflow },
                |m: &mut CPUState_CpuStatusRegister| { &mut m.overflow },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "interrupt",
                |m: &CPUState_CpuStatusRegister| { &m.interrupt },
                |m: &mut CPUState_CpuStatusRegister| { &mut m.interrupt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "zero",
                |m: &CPUState_CpuStatusRegister| { &m.zero },
                |m: &mut CPUState_CpuStatusRegister| { &mut m.zero },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "carry",
                |m: &CPUState_CpuStatusRegister| { &m.carry },
                |m: &mut CPUState_CpuStatusRegister| { &mut m.carry },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CPUState_CpuStatusRegister>(
                "CPUState.CpuStatusRegister",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CPUState_CpuStatusRegister {
        static instance: ::protobuf::rt::LazyV2<CPUState_CpuStatusRegister> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CPUState_CpuStatusRegister::new)
    }
}

impl ::protobuf::Clear for CPUState_CpuStatusRegister {
    fn clear(&mut self) {
        self.negative = false;
        self.overflow = false;
        self.interrupt = false;
        self.zero = false;
        self.carry = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CPUState_CpuStatusRegister {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CPUState_CpuStatusRegister {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fproto/api.proto\"\x0f\n\rAttachRequest\"*\n\x0bAttachReply\x12\x1b\
    \n\x03cpu\x18\x01\x20\x01(\x0b2\t.CPUStateR\x03cpu\"\x0f\n\rResumeReques\
    t\"*\n\x0bResumeReply\x12\x1b\n\x03cpu\x18\x01\x20\x01(\x0b2\t.CPUStateR\
    \x03cpu\"\r\n\x0bStepRequest\"(\n\tStepReply\x12\x1b\n\x03cpu\x18\x01\
    \x20\x01(\x0b2\t.CPUStateR\x03cpu\"N\n\x14PutBreakpointRequest\x12\x18\n\
    \x07address\x18\x01\x20\x01(\rR\x07address\x12\x1c\n\ttemporary\x18\x02\
    \x20\x01(\x08R\ttemporary\"3\n\x17DeleteBreakpointRequest\x12\x18\n\x07a\
    ddress\x18\x01\x20\x01(\rR\x07address\"I\n\x0fBreakpointReply\x12\x18\n\
    \x07address\x18\x01\x20\x01(\rR\x07address\x12\x1c\n\ttemporary\x18\x02\
    \x20\x01(\x08R\ttemporary\"q\n\x11ReadMemoryRequest\x12\x14\n\x05start\
    \x18\x01\x20\x01(\rR\x05start\x12\x14\n\x05count\x18\x02\x20\x01(\x05R\
    \x05count\x120\n\x14count_by_instruction\x18\x03\x20\x01(\x08R\x12countB\
    yInstruction\"z\n\x0fReadMemoryReply\x12\x14\n\x05start\x18\x01\x20\x01(\
    \rR\x05start\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\x12\x14\n\
    \x05count\x18\x03\x20\x01(\rR\x05count\x12'\n\x0fprogram_counter\x18\x04\
    \x20\x01(\rR\x0eprogramCounter\"\x0f\n\rStatusRequest\"\xa7\x01\n\x0bSta\
    tusReply\x12\x19\n\x08rom_name\x18\x01\x20\x01(\tR\x07romName\x12D\n\x0f\
    emulation_state\x18\x02\x20\x01(\x0e2\x1b.StatusReply.EmulationStateR\
    \x0eemulationState\"7\n\x0eEmulationState\x12\x0b\n\x07UNKNOWN\x10\0\x12\
    \x0b\n\x07RUNNING\x10\x01\x12\x0b\n\x07STOPPED\x10\x02\"\x10\n\x0eReadCP\
    URequest\"+\n\x0cReadCPUReply\x12\x1b\n\x03cpu\x18\x01\x20\x01(\x0b2\t.C\
    PUStateR\x03cpu\"\xcf\x02\n\x08CPUState\x12\x0c\n\x01x\x18\x01\x20\x01(\
    \rR\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\rR\x01y\x12\x0e\n\x02ac\x18\x03\
    \x20\x01(\rR\x02ac\x123\n\x06status\x18\x04\x20\x01(\x0b2\x1b.CPUState.C\
    puStatusRegisterR\x06status\x12'\n\x0fprogram_counter\x18\x05\x20\x01(\r\
    R\x0eprogramCounter\x12#\n\rstack_pointer\x18\x06\x20\x01(\rR\x0cstackPo\
    inter\x1a\x93\x01\n\x11CpuStatusRegister\x12\x1a\n\x08negative\x18\x01\
    \x20\x01(\x08R\x08negative\x12\x1a\n\x08overflow\x18\x02\x20\x01(\x08R\
    \x08overflow\x12\x1c\n\tinterrupt\x18\x03\x20\x01(\x08R\tinterrupt\x12\
    \x12\n\x04zero\x18\x04\x20\x01(\x08R\x04zero\x12\x14\n\x05carry\x18\x05\
    \x20\x01(\x08R\x05carry2\x97\x03\n\x0eBobombDebugger\x12(\n\x06Attach\
    \x12\x0e.AttachRequest\x1a\x0c.AttachReply\"\0\x12*\n\x06Resume\x12\x0e.\
    ResumeRequest\x1a\x0c.ResumeReply\"\00\x01\x12$\n\x04Step\x12\x0c.StepRe\
    quest\x1a\n.StepReply\"\00\x01\x12:\n\rPutBreakpoint\x12\x15.PutBreakpoi\
    ntRequest\x1a\x10.BreakpointReply\"\0\x12@\n\x10DeleteBreakpoint\x12\x18\
    .DeleteBreakpointRequest\x1a\x10.BreakpointReply\"\0\x124\n\nReadMemory\
    \x12\x12.ReadMemoryRequest\x1a\x10.ReadMemoryReply\"\0\x12+\n\x07ReadCPU\
    \x12\x0f.ReadCPURequest\x1a\r.ReadCPUReply\"\0\x12(\n\x06Status\x12\x0e.\
    StatusRequest\x1a\x0c.StatusReply\"\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
